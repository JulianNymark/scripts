#!/bin/bash

# A simple script that makes backups of a chosen directory to the disk of your choice!
# (how generic!)
#
# Uses: I have everything important stored in /home/$USER/important/, so I can now run:
#     sudo backup <Flashdrive Name>
# and feel super safe!

# Example 2: I have something stored in another directory (other than important), so i
# run:
#     sudo backup <Flashdrive Name> <otherDir>
#

# Notes:
# * make sure you don't have multiple disks with the same name! and renaming disks to 
#     short nice names will help as well.
# * you might have to replace $USER with your actual username unless you are copying a
#     file from root's home or can mount disks without sudo. :)
#     in that case you can call the command without sudo entirely
# * the disk is referenced by label, so use "blkid" or browse /dev/disk/by-label to get
#     familiar with disk name
# * the backup system is semi-friendly by using "cp's" -b [OPTION], this keeps a 2 file
#     history of multiple backups of the same file name
#     (so if you get an 'Oh sh**' moment, you MIGHT not have to worry :P)
# * it also uses the -u option, that only cp's if source file is newer than destination,
#     (or if no destination file is available)


if [ $# -eq 1 ]
then
    if [ ! -d /media/$1 ]
    then
	mkdir -p /media/$1
    fi
    mount /dev/disk/by-label/$1 /media/$1
    cp -rub /home/$USER/important/ /media/$1/backups/
    umount /media/$1
    rm -r /media/$1
    echo "Done!"
elif [ $# -eq 2 ]
then
    if [ ! -d /media/$1 ]
    then
	mkdir -p /media/$1
    fi
    if [ -d /home/$USER/$2 ]
    then
	mount /dev/disk/by-label/$1 /media/$1
	cp -rub /home/$USER/$2/ /media/$1/backups/
	umount /media/$1
	rm -r /media/$1
	echo "Done!"
    else
	echo "DIR does not exist!"
    fi
else
    echo "Usage: backup <disk-by-label> [dir-in-home]"
    echo "if DIR is not specified, only important is backed up"
fi